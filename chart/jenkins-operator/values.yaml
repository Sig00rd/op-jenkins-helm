# Jenkins Operator Helm chart

# apiVersion is the version of the Custom Resources manifests
apiVersion: operator-service.com/v1beta1

# operator is section for configuring operator deployment
operator:
  replicaCount: 1

  # image is the name (and tag) of the Jenkins Operator image
  image: op-svc-jenkins:53aea316

  # imagePullPolicy defines policy for pulling images
  imagePullPolicy: IfNotPresent

  # imagePullSecrets is used if you want to pull images from private repository
  imagePullSecrets:
  - name: kredki

  # command
  command:
    - /manager

  # nameOverride overrides the app name
  nameOverride: ""

  # fullnameOverride overrides the deployment name
  fullnameOverride: ""

  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}

jenkinsOperatorCRD:
  # Jenkins instance configuration
  jenkins:
    # enabled can enable or disable the Jenkins instance
    # Set to false if you have configured CR already and/or you want to deploy an operator only
    enabled: true

    # name of resource
    # The pod name will be jenkins-<name> (name will be set as suffix)
    name: jenkins

    # namespace is the namespace where the resources will be deployed
    # It's not recommended to use default namespace
    # Create new namespace for jenkins (called e.g. jenkins)
    namespace: default

    # labels are injected into metadata labels field
    labels: { }

    # annotations are injected into metadata annotations field
    annotations: { }

    podSpec:
      initContainers: [ ]
      containers:
        - name: jenkins-controller
          image: jenkins/jenkins:2.277.4-lts-alpine
          imagePullPolicy: IfNotPresent
          imagePullSecrets: [ ]
          livenessProbe: { }
          readinessProbe: { }
          resources: { }
          env: [ ]
          volumeMounts: [ ]
      volumes: [ ]
      restartPolicy: ""
      nodeSelector: [ ]
      imagePullSecrets: [ ]

      # Resource limit/request for Jenkins
      # See https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/ for details
      resources:
        limits:
          cpu: 1500m
          memory: 3Gi
        requests:
          cpu: 1
          memory: 500Mi
      podSecurityContext: ""
      affinity: ""
    # homePVC allows to set PersistentVolumeClaim properties for Jenkins home
    homePVC: { }
    # accessMode specifies the way the plugins cache can be mounted
    # accessMode: ""
    #
    # resourceStorage is the plugins cache volume size
    # resourceStorage: ""
    #
    # storageClassName is the name of the StorageClass required by the claim
    # storageClassName: ""

    # pluginsCache allows to set plugins cache specific pvc properties
    pluginsCache: { }
    # accessMode specifies the way the plugins cache can be mounted
    # accessMode: ""
    #
    # resourceStorage is the plugins cache volume size
    # resourceStorage: ""
    #
    # storageClassName is the name of the StorageClass required by the claim
    # storageClassName: ""

    # plugins are plugins required by the user
    # You can define plugins here
    # See https://jenkinsci.github.io/kubernetes-operator/docs/getting-started/latest/customization/#install-plugins for more details
    #
    # Example:
    #
    # plugins:
    # - name: jacoco
    #   version: "3.1.1"
    plugins: [ ]

    # roles defines list of extra RBAC roles for the Jenkins Master pod service account
    roles: [ ]

    # defines authorization strategy of the operator for the Jenkins API
    authorizationStrategy: createUser

    # disableCSRFProtection can enable or disable operator built-in CSRF protection
    # Set it to true if you are using OpenShift Jenkins Plugin
    # See https://github.com/jenkinsci/kubernetes-operator/pull/193 for more info
    disableCSRFProtection: false

  # jenkinsGroovyScriptsEnabled can enable or disable the JenkinsGroovyScript instances
  # Set to false if you have configured CR(s) already and/or you want to deploy an operator only
  jenkinsGroovyScriptsEnabled: true

  # JenkinsGroovyScripts instances configuration
  # JenkinsGroovyScriptSpec defines the desired state of JenkinsGroovyScript. It allows to write Groovy Scripts to modify the Jenkins.
  jenkinsGroovyScripts:
    # name of resource
    - name: groovy

      # namespace is the namespace where the resources will be deployed
      namespace: default

      # labels are injected into metadata labels field. Each JenkinsSeedJob Custom Resource need to reference corresponding
      # Jenkins Custom Resource via labels field
      labels:
        operator-service.com/jenkins: jenkins

      # annotations are injected into metadata annotations field
      annotations: { }

      # data is inline Groovy script
      data: |
        import jenkins.model.Jenkins

        def systemMessage = "Hello from v1beta1.JenkinsGroovyScript! Secrets: " + secrets

        Jenkins jenkins = Jenkins.getInstance()
        jenkins.setSystemMessage(systemMessage)
        jenkins.save()

        println "Hello world!"

      # secretRef is secret reference which allows to inject the secrets into Groovy script code
      secretRef:
        name: ""
        namespace: ""

      # dependsOn is JenkinsGroovyScript reference which determines the order of the Groovy scripts
      dependsOn:
        name: ""
        namespace: ""

  # jenkinsSeedJobsEnabled can enable or disable the JenkinsSeedJobs instances
  # Set to false if you have configured CR(s) already and/or you want to deploy an operator only
  jenkinsSeedJobsEnabled: true

    # JenkinsSeedJobs instances configuration
  # For seed job creation tutorial, check https://jenkinsci.github.io/kubernetes-operator/docs/getting-started/latest/configuration/#prepare-job-definitions-and-pipelines
  # See https://jenkinsci.github.io/kubernetes-operator/docs/getting-started/latest/configuration/#configure-seed-jobs for additional info
  jenkinsSeedJobs:
    # name of resource
    - name: example

      # namespace is the namespace where the resources will be deployed
      namespace: default

      # labels are injected into metadata labels field. Each JenkinsSeedJob Custom Resource need to reference corresponding
      # Jenkins Custom Resource via labels field
      labels:
        operator-service.com/jenkins: jenkins

      # annotations are injected into metadata annotations field
      annotations: { }

      # Repository is VCS repository settings
      repository:

        # branch is the repository branch where seed job definitions are stored
        branch: master

        # URL is the repository access URL. Can be SSH or HTTPS.
        url: https://github.com/jenkinsci/kubernetes-operator.git

        # targets is the path from repository root where seed job definitions are stored
        targets: "cicd/jobs/*.jenkins"

        # credentialID is the Kubernetes secret name which stores repository access credentials
        credentialID: ""

        # credentialType is the https://jenkinsci.github.io/kubernetes-credentials-provider-plugin/ credential type (optional)
        # allowed types:
        # "" define none Jenkins credential type
        # "basicSSHUserPrivateKey" basic SSH Jenkins credential type
        # "usernamePassword" define username & password Jenkins credential type
        # "external" defines other credential type
        credentialType: ""

      # agentRef represents a Jenkins Kubernetes Agent Reference. It has enough information to retrieve agent
      # in any namespace
      agentRef:

        # name is unique within a namespace to reference a secret resource.
        name: ""

        # namespace defines the space within which the secret name must be unique.
        namespace: ""

      # triggers define circumstances that execute jobs
      triggers:

        # bitbucketTrigger is used for Bitbucket web hooks (optional)
        bitbucketTrigger:
          push: false

        # gitHubTrigger is used for GitHub web hooks (optional)
        gitHubTrigger:
          push: false

        # buildPeriodically is used for scheduled timer trigger (optional)
        buildPeriodically: ""

        # pollSCM is setting for polling changes in SCM (optional)
        pollSCM: ""

      # settings configures the job build options
      settings:

        # ignoreMissingFiles is setting for Job DSL API plugin to ignore files that are missing (optional)
        ignoreMissingFiles: false

        # additionalClasspath is setting for Job DSL API plugin to set Additional Classpath (optional)
        additionalClasspath: ""

        # failOnMissingPlugin is setting for Job DSL API plugin that fails job if required plugin is missing (optional)
        failOnMissingPlugin: false

        # unstableOnDeprecation is setting for Job DSL API plugin that sets build status as unstable if build using deprecated features (optional)
        unstableOnDeprecation: false

  # jenkinsConfigurationsAsCodeEnabled can enable or disable the JenkinsConfigurationAsCode instances
  # Set to false if you have configured CR(s) already and/or you want to deploy an operator only
  jenkinsConfigurationsAsCodeEnabled: true

  # JenkinsConfigurationAsCode instances configuration
  # For configuration as code creation tutorial, check https://virtuslabrnd.github.io/operator-service-docs/operator-service-for-jenkins/latest/getting-started/customization/
  jenkinsConfigurationsAsCode:
    # name of resource
    - name: casc

      # namespace is the namespace where the resources will be deployed
      namespace: default

      # labels are injected into metadata labels field. Each JenkinsConfigurationAsCode Custom Resource need to reference corresponding
      # Jenkins Custom Resource via labels field
      labels:
        operator-service.com/jenkins: jenkins

      # annotations are injected into metadata annotations field
      annotations: { }

      # data is inline Groovy script
      data: |
        jenkins:
          systemMessage: |
            Welcome to our build server.

            This Jenkins is 100% configured and managed 'as code'.
            Config is now mostly handled by the 'Jenkins Configuration as Code' (JCasC) plugin.
            JCasC config can be found in the jenkins.yaml file in the ${JENKINS_HOME}/casc/ folder.

            Some settings are still injected from init.groovy.d scripts,
            but these settings will be ported over to JCasC as support becomes available.
            This is test of secret in casc --> ${testKey}
          numExecutors: 1 #

      # secretRef is secret reference which allows to inject the secrets into Configuration As Code script
      secretRef:
        name: ""
        namespace: ""